name: build

on:
  workflow_dispatch:

env:
  DEVICE: cheetah
  AOSP_CLANG_SYSTEM: linux-x86
  AOSP_CLANG_BRANCH: master
  AOSP_CLANG_VERSION: r416183b

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install cross toolchains
      run: |
       sudo apt-get update
       sudo apt-get install -y \
        git curl wget unzip bc bison build-essential flex gcc clang lld \
        libssl-dev libncurses5-dev libncursesw5-dev python3 python3-pip \
        gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi \
        binutils-aarch64-linux-gnu binutils-arm-linux-gnueabi \
        rsync ccache zip repo
   
    - name: Clone AOSP Clang Mirror (LineageOS)
      run: |
       git clone --depth=1 https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b clang-mirror
       mkdir -p "$HOME/clang"
       cp -r clang-mirror/* "$HOME/clang/"
       echo "$HOME/clang/bin" >> $GITHUB_PATH


    # Sync Pixel 7/7 Pro kernel source
    - name: Sync Pixel Kernel
      run: |
        mkdir pixel-kernel && cd pixel-kernel
        repo init --depth=1 -u https://android.googlesource.com/kernel/manifest -b android-gs-pantah-6.1-android16
        repo sync -j$(nproc)
        cd ..
    
    - name: Add LXC & Docker configs
      run: |
        cat >> kernel/arch/arm64/configs/${{ env.DEVICE }}_defconfig <<'EOF'
        # LXC & Docker support
        CONFIG_NAMESPACES=y
        CONFIG_UTS_NS=y
        CONFIG_IPC_NS=y
        CONFIG_PID_NS=y
        CONFIG_NET_NS=y
        CONFIG_USER_NS=y
        CONFIG_CGROUPS=y
        CONFIG_CGROUP_FREEZER=y
        CONFIG_CGROUP_DEVICE=y
        CONFIG_CGROUP_PIDS=y
        CONFIG_CGROUP_CPUACCT=y
        CONFIG_CGROUP_SCHED=y
        CONFIG_CPUSETS=y
        CONFIG_MEMCG=y
        CONFIG_BLK_CGROUP=y
        CONFIG_CGROUP_BPF=y
        CONFIG_BPF_SYSCALL=y
        CONFIG_BPF_JIT=y
        CONFIG_SECCOMP=y
        CONFIG_SECCOMP_FILTER=y
        CONFIG_KEYS=y
        CONFIG_VETH=y
        CONFIG_BRIDGE=y
        CONFIG_BRIDGE_NETFILTER=y
        CONFIG_IP_NF_FILTER=y
        CONFIG_IP_NF_TARGET_MASQUERADE=y
        CONFIG_NETFILTER_XT_MATCH_ADDRTYPE=y
        CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
        CONFIG_NETFILTER_XT_MATCH_IPVS=y
        CONFIG_IP_NF_IPTABLES=y
        CONFIG_IP_NF_NAT=y
        CONFIG_IP_NF_TARGET_REDIRECT=y
        CONFIG_OVERLAY_FS=y
        CONFIG_EXT4_FS=y
        CONFIG_EXT4_FS_POSIX_ACL=y
        CONFIG_BTRFS_FS=y
        CONFIG_DM_THIN_PROVISIONING=y
        CONFIG_CGROUP_HUGETLB=y
        EOF

    - name: Build kernel
      run: |
        cd kernel
        make O=out ARCH=arm64 ${{ env.DEVICE }}_defconfig
        PATH=$HOME/clang/bin:$PATH \
        make -j$(nproc) O=out \
        ARCH=arm64 \
        CC=clang \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
        LD=aarch64-linux-gnu-ld

    - name: Upload kernel image
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.DEVICE }}
        path: kernel/out/arch/arm64/boot/Image.gz-dtb
